{"version":3,"sources":["webpack:///./src/irokoui/journal/journal-resolver.ts","webpack:///./src/irokoui/journal/journal-routing.module.ts","webpack:///./src/irokoui/journal/journal-view/journal-view.component.html","webpack:///./src/irokoui/journal/journal-view/journal-view.component.ts","webpack:///./src/irokoui/journal/journal.module.ts","webpack:///./src/irokoui/journal/journal.service.ts","webpack:///./src/irokoui/journal/journal/journal.component.html","webpack:///./src/irokoui/journal/journal/journal.component.ts"],"names":[],"mappings":"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","file":"journal-journal-module-ngfactory.js","sourcesContent":["import { Injectable }             from '@angular/core';\nimport { Router, Resolve, RouterStateSnapshot,\n         ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable }             from 'rxjs';\nimport { map, take }              from 'rxjs/operators';\n\nimport { JournalService } from './journal.service';\nimport { Journal } from '../entities/journal.entity';\n\n\n@Injectable()\nexport class JournalResolver implements Resolve<Journal> {\n  constructor(private service: JournalService, private router: Router) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Journal> {\n    let id = route.paramMap.get('id');\n    return this.service.getJournalsById(id).pipe(\n      take(1),\n      map(node => {\n        if (node) {\n          return node;\n        } else {\n          this.router.navigate(['/']);\n        }\n      })\n    );\n  }\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { JournalViewComponent } from './journal-view/journal-view.component';\nimport { JournalResolver } from './journal-resolver';\nimport { JournalComponent } from './journal/journal.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: JournalComponent,\n    children: [\n      // {\n      //   path: '',\n      //   redirectTo: '/catalog/journals',\n      // },\n      {\n        path: ':id',\n        component: JournalViewComponent,\n        resolve: {\n          journal: JournalResolver\n        }\n\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [\n    JournalResolver\n  ]\n})\nexport class JournalRoutingModule { }\n","<<<<<<< HEAD\n=======\n<!-- {# <mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"loading\"></mat-progress-bar> #}\n\n{# <h1>{{journal.title}}</h1>\n<h2>Revista Científica</h2>\n<mat-card>\n   \n    <mat-card-header>\n       \n\n\n        <mat-card-title *ngIf=\"journal.institution\">\n                {{journal.institution}}\n        </mat-card-title>\n\n        <mat-card-subtitle>\n                <div>\n                    <label>ISSN: </label>\n                    <p *ngIf=\"journal.issn.p\">\n                        <label>Impreso: </label> {{journal.issn.p}}\n                    </p>\n                    <p *ngIf=\"journal.issn.e\">\n                        <label>Electrónico</label> {{journal.issn.e}}\n                    </p>\n                    <p *ngIf=\"journal.issn.l\">\n                        <label>De enlace</label> {{journal.issn.l}}\n                    </p>\n                </div>\n                <div *ngIf=\"journal.rnps\">RNPS: {{journal.rnps}}</div>\n        </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content *ngIf=\"journal.description\">\n        <div class=\"e2e-inner-html-bound  text-align-justify\" [innerHTML]=\"journal.description\"></div>\n\n    </mat-card-content>\n\n\n    <ng-container *ngIf=\"journal.logo; else elseTemplate\">\n            <img mat-card-image src=\"/assets/images/journals/{{journal.logo}}\">\n        </ng-container>\n        <ng-template #elseTemplate>\n            <img mat-card-image src=\"/assets/images/no-image.png\">\n        </ng-template>\n</mat-card> -->\n>>>>>>> 301bbb000a6e5fdeb5f7a29e6d27e66b33c4487f\n","import { Component, OnInit, OnChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Journal } from '../../entities/journal.entity';\nimport { ActivatedRoute } from '@angular/router';\nimport { MetadataService } from '../../core/metadata.service';\n\n@Component({\n  selector: 'toco-journal-view',\n  templateUrl: './journal-view.component.html',\n  styleUrls: ['./journal-view.component.scss']\n})\nexport class JournalViewComponent implements OnInit, OnChanges {\n\n  constructor(private route: ActivatedRoute, private metadata: MetadataService) { }\n\n  journal:  Journal;\n\n  loading = true;\n\n  ngOnInit() {\n    this.route.data\n    .subscribe((data: { journal: Journal }) => {\n      this.loading = false;\n      this.journal = data.journal;\n      this.metadata.setTitleDescription('Revista Científica ' + this.journal.jinformation.title, this.journal.jinformation.description);\n    });\n  }\n\n  ngOnChanges(){\n    // this.metadata.setTitleDescription(this.journal.title, this.journal.description);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { JournalRoutingModule } from './journal-routing.module';\nimport { JournalComponent } from './journal/journal.component';\nimport { JournalViewComponent } from './journal-view/journal-view.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { JournalService } from './journal.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    JournalRoutingModule\n  ],\n  declarations: [\n    JournalComponent, \n    JournalViewComponent\n  ],\n  providers: [\n    JournalService\n  ]\n})\nexport class JournalModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\nimport {Observable, Observer, from} from \"rxjs\";\nimport { Journal } from '../entities/journal.entity';\nimport { environment } from '../../environments/environment';\n@Injectable()\nexport class JournalService {\n\n\n  constructor(private http: HttpClient) { }\n\n  getJournalsById(id: string):Observable<Journal>{\n    let req = environment.apisEndpoints.irokoCatalog + '/sources/' + id;\n    return this.http.get<Journal>(req);\n  }\n}","<router-outlet></router-outlet>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'toco-journal',\n  templateUrl: './journal.component.html',\n  styleUrls: ['./journal.component.scss']\n})\nexport class JournalComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n"],"sourceRoot":""}